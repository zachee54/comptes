<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="custom build Comptes" basedir="." default="jar complet"
	xmlns:rsel="antlib:org.apache.tools.ant.types.resources.selectors"
	xmlns:rcmp="antlib:org.apache.tools.ant.types.resources.comparators">

	<!-- Répertoires de travail -->
	<property name="src" value="src" />
	<property name="test" value="test" />
	<property name="bin" value="bin.haas" />
	<property name="dist" value="jar" />
	<property name="share" value="../Olivier" />
	<property name="share.3rd-party.src" value="${share}/src-3rd-party" />

	<!-- Point d'entrée pour la compilation ou l'exécution -->
	<property name="main" value="haas/olivier/comptes/Comptes" />
	<property name="main.source" value="${main}.java" />

	<!-- Les répertoires des sources, sous forme de path -->
	<path id="src.path">
		<pathelement location="${src}" />
		<pathelement location="${share}/src" />
		<pathelement location="${share.3rd-party.src}" />
	</path>
	<pathconvert property="src.dirs" refid="src.path"
		pathsep="," />
	
	<!-- Classes de tests -->
	<path id="test.path">
		<pathelement location="${test}" />
		<pathelement location="${share}/test" />
	</path>
	<pathconvert property="test.dirs" refid="test.path" pathsep="," />

	<!-- Ressources utiles -->
	<union id="resources.non-java">

		<!-- Toutes celles du projet lui-même (hors classes Java) -->
		<fileset dir="${src}" excludes="**/*.java" />
		
		<!-- Le fichier de build lui-même -->
		<file file="build.xml" />

		<!-- Des ressources spécifiques dans le projet partagé -->
		<!-- <filelist dir="${share}/Comptes-Omega"> <file name="haas/olivier/gui/images/sc05502.png" 
			/> </filelist> -->
	</union>


	<!-- Tâches -->

	<target name="clean" description="Supprimer tout">
		<delete dir="${bin}" />
		<delete dir="${dist}" />
		<delete dir="${dist}" />
	</target>

	<target name="compile" depends="clean"
		description="Compiler les classes utiles">
		<mkdir dir="${bin}" />

		<!-- La classe point d'entrée + les ObjectFactory de JAXB non -->
		<!-- référencées par le compilateur -->
	 	<javac includes="${main.source},**/ObjectFactory.java"
			destdir="${bin}" includeantruntime="false" debug="true">
			<src refid="src.path" />
		</javac>
	</target>
	
	<target name="copy package-info" depends="compile"
		description="Copie les fichiers package-info.java des paquets compilés">
		
		<!-- Nom attendu du package-info de chaque répertoire compilé -->
		<pathconvert property="package-info.java.expected" pathsep=",">
			<mappedresources>
				<dirset dir="${bin}" />
				<globmapper from="*" to="*${file.separator}package-info.java" />
			</mappedresources>
		</pathconvert>
		
		<!-- Copier vers bin ceux qui existent dans les sources -->
		<copy todir="${bin}">
			<multirootfileset basedirs="${src.dirs}" type="file"
				includes="${package-info.java.expected}" />
		</copy>
	</target>
		
	<target name="compile package-info" depends="copy package-info"
		description="Compile les package-info sur place. Cela peut être nécessaire, par exemple, pour JAXB">
		<javac srcdir="${bin}" destdir="${bin}"
			includes="**/package-info.java" includeantruntime="false" />
	</target>

	<target name="copy resources"
		description="Copier les ressources utiles (non Java)">
		<copy todir="${bin}">
			<resources refid="resources.non-java" />
		</copy>
	</target>

	<target name="copy sources" depends="compile"
		description="Copier les sources avec leurs classes">

		<!-- Copier les fichiers -->
		<copy todir="${bin}">
			<restrict>

				<!-- Seulement ceux des répertoires de sources et tests... -->
				<multirootfileset
					basedirs="${src.dirs},${test.dirs}" />

				<!-- ...qui correspondent à un... -->
				<rsel:compare when="equal" against="any">
					<control>

						<!-- ...fichier classe du même nom, la seule -->
						<!-- différence étant l'extension ".java" ou -->
						<!-- "Test.java" au lieu de ".class" -->
						<mappedresources enablemultiplemappings="true">
							<fileset dir="${bin}" includes="**/*.class" />
							<compositemapper>
								<globmapper from="*.class" to="*.java" />
								<globmapper from="*.class" to="*Test.java" />
							</compositemapper>
						</mappedresources>
					</control>

					<!-- ...en les comparant d'après leurs noms -->
					<rcmp:name />
				</rsel:compare>
			</restrict>
		</copy>
	</target>

	<target name="jar complet" depends="compile,copy sources,copy resources,compile package-info"
		description="Crée un JAR exécutable contenant les classes, les sources, les tests et les ressources">
		<mkdir dir="${dist}" />

		<!-- Nom du fichier MANIFEST -->
		<property name="manifest" value="${dist}/MANIFEST.MF" />

		<!-- Créer le MANIFEST -->
		<manifest file="${manifest}">
			<attribute name="Main-Class" value="${main}" />
		</manifest>

		<!-- Créer le JAR -->
		<jar basedir="${bin}" destfile="${dist}/finances.jar" manifest="${manifest}" />

		<!-- Effacer tout ce qui était temporaire -->
		<delete file="${manifest}" />
	</target>
</project>